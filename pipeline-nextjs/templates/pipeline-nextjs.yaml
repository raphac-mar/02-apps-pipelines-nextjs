apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: {{ .Values.pipelineName }}
  namespace: {{ .Values.pipelineNamespace }}
spec:
  workspaces:
    - name: shared-workspace
      description: |
        Pipeline's workspace
    - name: git-credentials
      description: My ssh credentials
  params:
    - name: pipelineStart
      description: Pipeline start by webhook or pipeline-run?
      type: string
      default: webhook
    #
    - name: appName
      description: App name.
      type: string
      default: ""
    - name: appNamespace
      description: App namespace.
      type: string
      default: ""
    - name: imageRegistryNamespace
      description: Image namespace.
      type: string
      default: ""
    #
    - name: repoUrl
      type: string
      description: The git repository URL to clone from.
    - name: branchName
      type: string
      description: The git branch to clone.
      default: "dev"
    #
    - name: patchDeploy
      default: |
        echo "----------- Adds additional name 'latest' to new image build"
        echo "oc tag $(params.appName):$(tasks.git-clone.results.commit) $(params.appName):latest -n $(params.imageRegistryNamespace)"
        oc tag $(params.appName):$(tasks.git-clone.results.commit) $(params.appName):latest -n $(params.imageRegistryNamespace)
        echo "----------- Redeploy pods"
        patched_at_timestamp=`date +%s`
        echo "oc patch deployment $(params.appName) --namespace=$(params.appNamespace) --patch='{\"spec\":{\"template\":{\"metadata\":{
          \"labels\":{
            \"patched_at\": '\"$patched_at_timestamp\"'
          }
        }}}}'"
        oc patch deployment $(params.appName) --namespace=$(params.appNamespace) --patch='{"spec":{"template":{"metadata":{
          "labels":{
            "patched_at": '\"$patched_at_timestamp\"'
          }
        }}}}'
  tasks:
    #
    - name: pipeline-start
      when:
        - input: $(params.branchName)
          operator: in
          values:
            - dev
        - input: $(params.pipelineStart)
          operator: in
          values:
            - webhook
      taskSpec:
        metadata: {}	
        spec: null
        steps:
          - computeResources: {}	
            image: 'alpine:latest'
            name: read            
            script: |
              #!/usr/bin/env sh
              echo "branch: dev - pipelineStart: webhook"
              echo "build nÃ£o foi executado, porque o pipeline foi iniciado via webhook, no branch dev"
              echo "para executar o build, inicie o pipeline via pipeline-run"
    #
    - name: git-clone
      runAfter:
        - pipeline-start
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: url
          value: $(params.repoUrl)
        - name: revision
          value: $(params.branchName)
        - name: subdirectory
          value: $(params.appName)-$(params.branchName)
    #
    - name: get-app-version
      when:
        - input: $(params.branchName)
          operator: in
          values:
            - dev
        - input: $(params.pipelineStart)
          operator: in
          values:
            - pipeline-run
      runAfter:
        - git-clone
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: subdirectory
          value: $(workspaces.source.path)/$(params.appName)-$(params.branchName)
      taskSpec:
        metadata: {}
        spec: null
        results:
          - name: version
            description: version
            type: string
        params:
          - name: subdirectory
            type: string
        steps:
          - computeResources: {}
            name: read
            env:
              - name: PARAM_SUBDIR
                value: $(params.subdirectory)
            image: alpine:latest
            script: |
              #!/usr/bin/env sh
              cat $PARAM_SUBDIR/package.json | grep \"version\" | cut -d'"' -f 4
              RESULT_VERSION="$(cat $PARAM_SUBDIR/package.json | grep \"version\" | cut -d'"' -f 4)"
              printf "%s" "${RESULT_VERSION}" > "$(results.version.path)"
    #
    - name: buildah
      taskRef:
        kind: ClusterTask
        name: buildah
      runAfter:
        - get-app-version
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: IMAGE
          value: image-registry.openshift-image-registry.svc:5000/$(params.imageRegistryNamespace)/$(params.appName):$(tasks.git-clone.results.commit)
        - name: DOCKERFILE
          value: ./$(params.appName)-$(params.branchName)/Dockerfile
        - name: CONTEXT
          value: ./$(params.appName)-$(params.branchName)
        - name: BUILD_EXTRA_ARGS
          value: --build-arg=VERSION_ARG=$(tasks.get-app-version.results.version)
        - name: TLSVERIFY
          value: 'false'
    #
    - name: git-clone-infra
      runAfter:
        - buildah
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: url
          value: https://github.com/raphac-mar/03-app-k8s
        - name: revision
          value: dev
        - name: subdirectory
          value: $(params.appName)-infra
    #
    - name: update-helm-repo-image-tag
      runAfter:
        - git-clone-infra
      params:
        - name: subdirectory
          value: $(workspaces.source.path)/$(params.appName)-infra/admin-dashboard
      workspaces:
        - name: source
          workspace: shared-workspace
      taskSpec:
        metadata: {}
        params:
          - name: subdirectory
            type: string
        spec: null
        steps:
          - computeResources: {}
            image: 'alpine:latest'
            name: build
            script: |
              #https://tekton.dev/docs/pipelines/auth/
              #!/usr/bin/env sh
              cat $(params.subdirectory)/values.yaml
              sed -i 's+tag: [[:graph:]]*+tag: $(tasks.git-clone.results.commit)+g' $(params.subdirectory)/values.yaml
              cat $(params.subdirectory)/values.yaml
    #
    - name: use-git-cli
      runAfter:
        - update-helm-repo-image-tag
      params:
        - name: subdirectory
          value: $(workspaces.source.path)/$(params.appName)-infra
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: ssh-directory
          workspace: git-credentials
      taskSpec:
        metadata: {}
        params:
          - name: subdirectory
            type: string
        spec: null
        steps:
          - computeResources: {}
            image: 'alpine/git:v2.40.1'
            name: build
            script: |
              #!/usr/bin/env sh
              ssh -T git@github.com
              set -e
              cd $(params.subdirectory)

              git config --global --add safe.directory $(params.subdirectory)
              git config --global user.email "raphac@gmail.com"
              git config --global user.name "raphac-mar"
              git remote set-url origin git@github.com:raphac-mar/03-app-k8s.git

              git switch dev
              git status
              git add .
              git commit -am "openshift gitops"
              git push
